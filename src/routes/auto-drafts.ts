/**
 * Auto-Generated Draft Routes
 * Handles auto-generated drafts, editing, sending, and management
 */
import { Router } from 'express';
import { AuthenticatedRequest, successResponse, errorResponse } from '../types/routes';
import { authMiddleware, getUserId } from '../middleware/auth';
import { serviceContainer } from '../core/serviceContainer';

const router = Router();

// Apply authentication middleware to all routes
router.use(authMiddleware.authenticate);

// GET /auto-drafts - List all auto-generated drafts with pagination
router.get('/', async (req: AuthenticatedRequest, res) => {
  try {
    console.log('🔄 Fetching auto-drafts with email data...');
    const limit = parseInt(req.query.limit as string) || 20;
    const status = req.query.status as string;
    const userId = req.userId;

    if (!userId) {
      return res.status(401).json({ error: 'User authentication required' });
    }

    const autoGeneratedDraftModel = serviceContainer.get('autoGeneratedDraftModel');

    let drafts;
    if (status === 'pending') {
      drafts = await autoGeneratedDraftModel.getPendingDraftsWithEmails(limit, userId);
    } else {
      // For now, just get pending drafts with email data for the specific user
      drafts = await autoGeneratedDraftModel.getPendingDraftsWithEmails(limit, userId);
    }

    res.json({
      message: 'Auto-generated drafts retrieved successfully',
      drafts: drafts.map(draft => ({
        id: draft.id,
        draftId: draft.draft_id,
        originalEmailId: draft.original_email_id,
        subject: draft.subject,
        body: draft.body,
        tone: draft.tone,
        urgencyLevel: draft.urgency_level,
        relationshipType: draft.relationship_type,
        status: draft.status,
        createdAt: draft.created_at,
        processingTime: draft.processing_time_ms ? `${draft.processing_time_ms}ms` : null,
        // Include original email data
        originalEmail: {
          subject: draft.original_subject,
          from: draft.original_from,
          date: draft.original_date,
          isRead: draft.original_is_read,
          preview: draft.original_preview,
          gmailId: draft.original_gmail_id,
          body: draft.original_preview // Use the full preview as body for frontend
        }
      })),
      total: drafts.length,
      userId: userId.substring(0, 8) + '...'
    });
  } catch (error) {
    console.error('❌ Error fetching auto-generated drafts:', error);
    res.status(500).json({ error: 'Failed to fetch auto-generated drafts' });
  }
});

// GET /auto-drafts/:id - Get specific auto-generated draft with metadata
router.get('/:id', async (req: AuthenticatedRequest, res) => {
  try {
    const draftId = parseInt(req.params.id);
    const userId = req.userId;

    if (!userId) {
      return res.status(401).json({ error: 'User authentication required' });
    }

    const autoGeneratedDraftModel = serviceContainer.get('autoGeneratedDraftModel');
    const draft = await autoGeneratedDraftModel.getDraftById(draftId);

    if (!draft) {
      return res.status(404).json({ error: 'Auto-generated draft not found' });
    }

    // Security check: ensure the draft belongs to the authenticated user
    if (draft.user_id !== userId) {
      return res.status(403).json({ error: 'Access denied: Draft does not belong to authenticated user' });
    }

    res.json({
      message: 'Auto-generated draft retrieved successfully',
      draft: {
        id: draft.id,
        draftId: draft.draft_id,
        originalEmailId: draft.original_email_id,
        subject: draft.subject,
        body: draft.body,
        tone: draft.tone,
        urgencyLevel: draft.urgency_level,
        relationshipType: draft.relationship_type,
        contextUsed: draft.context_used || [],
        status: draft.status,
        createdAt: draft.created_at,
        updatedAt: draft.updated_at,
        processingTimeMs: draft.processing_time_ms,
        userId: draft.user_id,
        metadata: {
          wordCount: draft.body ? draft.body.split(' ').length : 0,
          characterCount: draft.body ? draft.body.length : 0,
          estimatedReadTime: draft.body ? Math.ceil(draft.body.split(' ').length / 200) : 0
        }
      },
      userId: userId.substring(0, 8) + '...'
    });
  } catch (error) {
    console.error('❌ Error fetching auto-generated draft:', error);
    res.status(500).json({ error: 'Failed to fetch auto-generated draft' });
  }
});

// PUT /auto-drafts/:id - Update auto-generated draft
router.put('/:id', async (req: AuthenticatedRequest, res) => {
  try {
    const draftId = parseInt(req.params.id);
    const userId = req.userId;
    const { subject, body, tone, urgencyLevel } = req.body;

    if (!userId) {
      return res.status(401).json({ error: 'User authentication required' });
    }

    console.log(`📝 Updating auto-generated draft ${draftId} for user: ${userId.substring(0, 8)}...`);

    // Validation
    if (!subject && !body && !tone && !urgencyLevel) {
      return res.status(400).json({ error: 'At least one field (subject, body, tone, urgencyLevel) must be provided for update' });
    }

    const pool = serviceContainer.get('pool');

    // First, check if the draft exists and belongs to the user
    const checkQuery = 'SELECT id, user_id FROM auto_generated_drafts WHERE id = $1';
    const checkResult = await pool.query(checkQuery, [draftId]);

    if (checkResult.rows.length === 0) {
      return res.status(404).json({ error: 'Auto-generated draft not found' });
    }

    if (checkResult.rows[0].user_id !== userId) {
      return res.status(403).json({ error: 'Access denied: Draft does not belong to authenticated user' });
    }

    // Build dynamic update query
    const updateFields: string[] = [];
    const updateValues: any[] = [];
    let paramCount = 1;

    if (subject) {
      updateFields.push(`subject = $${paramCount}`);
      updateValues.push(subject);
      paramCount++;
    }

    if (body) {
      updateFields.push(`body = $${paramCount}`);
      updateValues.push(body);
      paramCount++;
    }

    if (tone) {
      updateFields.push(`tone = $${paramCount}`);
      updateValues.push(tone);
      paramCount++;
    }

    if (urgencyLevel) {
      updateFields.push(`urgency_level = $${paramCount}`);
      updateValues.push(urgencyLevel);
      paramCount++;
    }

    // Always update the updated_at timestamp
    updateFields.push('updated_at = CURRENT_TIMESTAMP');

    // Add WHERE clause parameters
    updateValues.push(draftId);
    const whereParam = paramCount;

    const updateQuery = `
      UPDATE auto_generated_drafts
      SET ${updateFields.join(', ')}
      WHERE id = $${whereParam}
      RETURNING *
    `;

    const result = await pool.query(updateQuery, updateValues);

    if (result.rows.length === 0) {
      return res.status(500).json({ error: 'Failed to update draft' });
    }

    const updatedDraft = result.rows[0];

    console.log(`✅ Auto-generated draft ${draftId} updated successfully`);

    res.json({
      message: 'Auto-generated draft updated successfully',
      draft: {
        id: updatedDraft.id,
        subject: updatedDraft.subject,
        body: updatedDraft.body,
        tone: updatedDraft.tone,
        urgencyLevel: updatedDraft.urgency_level,
        updatedAt: updatedDraft.updated_at
      }
    });

  } catch (error) {
    console.error('❌ Error updating auto-generated draft:', error);
    res.status(500).json({ error: 'Failed to update auto-generated draft' });
  }
});

// POST /auto-drafts/:id/send - Send auto-generated draft
router.post('/:id/send', async (req: AuthenticatedRequest, res) => {
  try {
    const draftId = parseInt(req.params.id);
    const userId = req.userId;

    if (!userId) {
      return res.status(401).json({ error: 'User authentication required' });
    }

    console.log(`📤 Sending auto-generated draft ${draftId} for user: ${userId.substring(0, 8)}...`);

    const pool = serviceContainer.get('pool');
    const gmailService = serviceContainer.get('gmailService');

    // Get the draft with email details
    const draftQuery = `
      SELECT agd.*, e.from_email, e.thread_id, e.gmail_id
      FROM auto_generated_drafts agd
      JOIN emails e ON agd.original_email_id = e.id
      WHERE agd.id = $1 AND agd.user_id = $2
    `;

    const draftResult = await pool.query(draftQuery, [draftId, userId]);

    if (draftResult.rows.length === 0) {
      return res.status(404).json({ error: 'Auto-generated draft not found or access denied' });
    }

    const draft = draftResult.rows[0];

    if (draft.status === 'sent') {
      return res.status(400).json({ error: 'Draft has already been sent' });
    }

    console.log(`📧 Sending response to: ${draft.from_email}`);

    // Initialize Gmail service for this user
    await gmailService.initializeForUser(userId);

    // Prepare email for sending
    const emailToSend = {
      to: draft.from_email,
      subject: draft.subject,
      body: draft.body,
      threadId: draft.thread_id, // This will make it a reply
      inReplyTo: draft.gmail_id
    };

    // Send the email via Gmail
    const sentEmail = await gmailService.sendEmail(emailToSend);

    // Update draft status in database
    const updateQuery = `
      UPDATE auto_generated_drafts
      SET status = 'sent', sent_at = CURRENT_TIMESTAMP, gmail_message_id = $1
      WHERE id = $2
      RETURNING *
    `;

    const updateResult = await pool.query(updateQuery, [sentEmail.id, draftId]);
    const updatedDraft = updateResult.rows[0];

    console.log(`✅ Auto-generated draft ${draftId} sent successfully. Gmail ID: ${sentEmail.id}`);

    res.json({
      message: 'Auto-generated draft sent successfully',
      draft: {
        id: updatedDraft.id,
        status: updatedDraft.status,
        sentAt: updatedDraft.sent_at,
        gmailMessageId: updatedDraft.gmail_message_id
      },
      sentEmail: {
        gmailId: sentEmail.id,
        to: draft.from_email,
        subject: draft.subject
      }
    });

  } catch (error) {
    console.error('❌ Error sending auto-generated draft:', error);

    // If sending failed, we should update the draft status to reflect the error
    try {
      const pool = serviceContainer.get('pool');
      await pool.query(
        'UPDATE auto_generated_drafts SET status = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2',
        ['error', req.params.id]
      );
    } catch (updateError) {
      console.error('❌ Error updating draft status after send failure:', updateError);
    }

    res.status(500).json({ error: 'Failed to send auto-generated draft' });
  }
});

// DELETE /auto-drafts/:id - Delete auto-generated draft (no auth required for cleanup)
router.delete('/:id', async (req: AuthenticatedRequest, res) => {
  try {
    const draftId = parseInt(req.params.id);
    console.log(`🗑️ Deleting auto-generated draft ${draftId}...`);

    const pool = serviceContainer.get('pool');
    const result = await pool.query('DELETE FROM auto_generated_drafts WHERE id = $1 RETURNING id', [draftId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Auto-generated draft not found' });
    }

    console.log(`✅ Auto-generated draft ${draftId} deleted successfully`);

    res.json({
      message: 'Auto-generated draft deleted successfully',
      deletedId: draftId
    });
  } catch (error) {
    console.error('❌ Error deleting auto-generated draft:', error);
    res.status(500).json({ error: 'Failed to delete auto-generated draft' });
  }
});

// POST /auto-drafts/:id/approve - Approve auto-generated draft (no auth required)
router.post('/:id/approve', async (req: AuthenticatedRequest, res) => {
  try {
    const draftId = parseInt(req.params.id);
    const { autoSend = false } = req.body;

    console.log(`✅ Approving auto-generated draft ${draftId}${autoSend ? ' with auto-send' : ''}...`);

    const pool = serviceContainer.get('pool');

    // Update draft status to approved
    const updateQuery = `
      UPDATE auto_generated_drafts
      SET status = $1, approved_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
      WHERE id = $2
      RETURNING *
    `;

    const result = await pool.query(updateQuery, [autoSend ? 'approved-auto-send' : 'approved', draftId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Auto-generated draft not found' });
    }

    const approvedDraft = result.rows[0];

    console.log(`✅ Auto-generated draft ${draftId} approved with status: ${approvedDraft.status}`);

    // If auto-send is requested, trigger the send process
    if (autoSend) {
      try {
        console.log(`📤 Auto-sending approved draft ${draftId}...`);

        // Note: In a production system, this might be better handled as a separate async job
        // For now, we'll call the send functionality directly
        const sendResult = await pool.query(`
          SELECT agd.*, e.from_email, e.thread_id, e.gmail_id, agd.user_id
          FROM auto_generated_drafts agd
          JOIN emails e ON agd.original_email_id = e.id
          WHERE agd.id = $1
        `, [draftId]);

        if (sendResult.rows.length > 0) {
          const draftToSend = sendResult.rows[0];

          // Initialize Gmail and send (simplified - in production you'd want better error handling)
          const gmailService = serviceContainer.get('gmailService');
          await gmailService.initializeForUser(draftToSend.user_id);

          const emailToSend = {
            to: draftToSend.from_email,
            subject: draftToSend.subject,
            body: draftToSend.body,
            threadId: draftToSend.thread_id
          };

          const sentEmail = await gmailService.sendEmail(emailToSend);

          // Update status to sent
          await pool.query(
            'UPDATE auto_generated_drafts SET status = $1, sent_at = CURRENT_TIMESTAMP, gmail_message_id = $2 WHERE id = $3',
            ['sent', sentEmail.id, draftId]
          );

          console.log(`✅ Draft ${draftId} auto-sent successfully`);
        }
      } catch (sendError) {
        console.error(`❌ Error auto-sending draft ${draftId}:`, sendError);
        // Don't fail the approval, just log the send error
        await pool.query(
          'UPDATE auto_generated_drafts SET status = $1 WHERE id = $2',
          ['approved-send-failed', draftId]
        );
      }
    }

    res.json({
      message: `Auto-generated draft ${autoSend ? 'approved and sent' : 'approved'} successfully`,
      draft: {
        id: approvedDraft.id,
        status: autoSend ? 'sent' : 'approved',
        approvedAt: approvedDraft.approved_at
      }
    });

  } catch (error) {
    console.error('❌ Error approving auto-generated draft:', error);
    res.status(500).json({ error: 'Failed to approve auto-generated draft' });
  }
});

export default router;