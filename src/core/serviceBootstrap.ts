/**
 * Service Bootstrap - Initializes and registers all services
 */
import { ServiceContainer } from './serviceContainer';
import { GmailService } from '../services/gmail';
import { EmailModel } from '../models/Email';
import { AIService } from '../services/ai';
import { DraftModel } from '../models/Draft';
import { ContextService } from '../services/context';
import { ContextModel } from '../models/Context';
import { ResponseService } from '../services/response';
import { LearningService } from '../services/learning';
import { CalendarService } from '../services/calendar';
import { CalendarModel } from '../models/Calendar';
import { MeetingDetectionService } from '../services/meetingDetection';
import { AutoSchedulingService } from '../services/autoScheduling';
import { MeetingPipelineService } from '../services/meetingPipeline';
import { MeetingConfirmationService } from '../services/meetingConfirmation';
import { AutoGeneratedDraftModel } from '../models/AutoGeneratedDraft';
import { PromotionalEmailModel } from '../models/PromotionalEmail';
import { TokenStorageService } from '../services/tokenStorage';
import { IntelligentEmailRouter } from '../services/intelligentEmailRouter';
import { WebhookRenewalService } from '../services/webhookRenewal';
import { WebhookTestingSuite } from '../services/webhookTesting';
import { WebhookProcessor } from './webhookProcessor';
import { pool } from '../database/connection';

export class ServiceBootstrap {
  private container: ServiceContainer;

  constructor() {
    this.container = ServiceContainer.getInstance();
  }

  async initializeServices(): Promise<void> {
    console.log('ðŸš€ [SERVICE BOOTSTRAP] Initializing all services...');

    // Initialize core services
    const gmailService = new GmailService();
    const emailModel = new EmailModel();
    const aiService = new AIService();
    const draftModel = new DraftModel();
    const contextService = new ContextService();
    const contextModel = new ContextModel();
    const responseService = new ResponseService(aiService, contextService, gmailService);
    const learningService = new LearningService(aiService);
    const calendarService = new CalendarService();
    const calendarModel = new CalendarModel();
    const meetingDetectionService = new MeetingDetectionService();
    const autoSchedulingService = new AutoSchedulingService();
    const meetingPipelineService = new MeetingPipelineService();
    const meetingConfirmationService = new MeetingConfirmationService();
    const autoGeneratedDraftModel = new AutoGeneratedDraftModel();
    const promotionalEmailModel = new PromotionalEmailModel();
    const tokenStorageService = new TokenStorageService();
    const intelligentEmailRouter = new IntelligentEmailRouter(responseService);
    const webhookRenewalService = new WebhookRenewalService();
    const webhookTestingSuite = new WebhookTestingSuite();
    const webhookProcessor = new WebhookProcessor();

    // Register all services in the container
    this.container.register('gmailService', gmailService);
    this.container.register('emailModel', emailModel);
    this.container.register('aiService', aiService);
    this.container.register('draftModel', draftModel);
    this.container.register('contextService', contextService);
    this.container.register('contextModel', contextModel);
    this.container.register('responseService', responseService);
    this.container.register('learningService', learningService);
    this.container.register('calendarService', calendarService);
    this.container.register('calendarModel', calendarModel);
    this.container.register('meetingDetectionService', meetingDetectionService);
    this.container.register('autoSchedulingService', autoSchedulingService);
    this.container.register('meetingPipelineService', meetingPipelineService);
    this.container.register('meetingConfirmationService', meetingConfirmationService);
    this.container.register('autoGeneratedDraftModel', autoGeneratedDraftModel);
    this.container.register('promotionalEmailModel', promotionalEmailModel);
    this.container.register('tokenStorageService', tokenStorageService);
    this.container.register('intelligentEmailRouter', intelligentEmailRouter);
    this.container.register('webhookRenewalService', webhookRenewalService);
    this.container.register('webhookTestingSuite', webhookTestingSuite);
    this.container.register('webhookProcessor', webhookProcessor);
    this.container.register('intelligentRouter', intelligentEmailRouter); // Alias for debug routes

    // Register database pool
    this.container.register('pool', pool);

    console.log('âœ… [SERVICE BOOTSTRAP] All services initialized and registered');

    // Start background services
    webhookRenewalService.startRenewalService();
    console.log('ðŸ”„ [SERVICE BOOTSTRAP] Background services started');
  }

  getContainer(): ServiceContainer {
    return this.container;
  }
}